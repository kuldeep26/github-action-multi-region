name: "Terraform Action"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
  id-token: write # This is required for AWS OIDC connection
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for the GitHub bot to comment on PRs
env:
  TF_LOG: INFO
jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    strategy:
      matrix:
        region: ["us-east-1", "ap-south-1"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Enter Region
        id: region
        run: |
          echo "::set-output name=region::$(read -p 'Enter the region: ' region && echo $region)"

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ matrix.region }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Initialize Terraform backend
        run: |
          if [[ "${{ matrix.region }}" == "us-east-1" ]]; then
            export S3_BACKEND_BUCKET="${{ secrets.S3_BACKEND_BUCKET_US_EAST_1 }}"
          elif [[ "${{ matrix.region }}" == "ap-south-1" ]]; then
            export S3_BACKEND_BUCKET="${{ secrets.S3_BACKEND_BUCKET_AP_SOUTH_1 }}"
          else
            echo "Invalid region specified"
            exit 1
          fi
          
          terraform init \
            -backend-config="bucket=$S3_BACKEND_BUCKET" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=${{ matrix.region }}"


      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        run: |
          terraform plan -var-file=variables-${{ matrix.region }}.tfvars
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Deploy infrastructure
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply -var-file=variables-${{ matrix.region }}.tfvars -auto-approve